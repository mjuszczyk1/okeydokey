extends layout

block content
    .row
        .col-md-6.col-md-offset-3
            div.well
                p This form will make an ajax call and then display the artist's ID if it finds one
                p If it can't find one, it will simply say "No artist found"
                p For example, Danny Brown's ID is: 7aA592KWirLsnfb5ulGWvU
            form#artistSearch
                div.form-group
                    label(for='searchArtist') Artist:
                    input#searchArtist.form-control(type='text', placeholder='Danny Brown' name='searchArtist')
                button.btn.btn-primary(type='submit') Submit
            h1#artistId
            hr/
    .row
        .col-md-6.col-md-offset-3
            div.well
                p This form takes an artist and will return all the albums for the first related artist.
                p I'm not sure what this can be used for in the future, this is just an exercise in AJAX/Spotify API
                p For example, Danny Brown's top related artist is Freddie Gibbs, so return Freddie Gibss' albums.
            form#longerRequest
                div.form-group
                    label(for='searchRelatedAlbums') Artist:
                    input#searchRelatedAlbums.form-control(type='text' placeholder='Danny Brown' name="searchRelatedAlbums")
                button.btn.btn-primary(type='submit') Submit
            div#relatedAlbums
                h1#mostRelatedArtist
                ul#albumList
            hr/
    .row
        .col-md-6.col-md-offset-3
            div.well
                p For this form, we'll take an artist name and return links to clips of songs from their most recent album.
                p For example, Danny Brown will return previews for the Atrocity Album.
            form#playPreviews
                div.form-group
                    label(for='artistPreview') Artist:
                    input#artistPreview.form-control(type='text' placeholder='Danny Brown' name='artistPreview')
                button.btn.btn-primary(type='submit') Submit
            h1#songPreviewsAlbumTitle
            ul#songPreviews
            hr/

    .row
        .col-md-6.col-md-offset-3
            div.well
                p I want to return every artist with "Yung" in their name.
                p And actually, since we don't need any user input, we'll just supply the template with that info.
            h1 Yung artists
            each yungin in yungArtists
                if yungin.images.length
                    div.row.yungin-row
                        div.col-md-6.img-col
                            a(href=`${yungin.external_urls.spotify}` target="blank")
                                img(src=`${yungin.images[0].url}`)
                        div.col-md-6.name-col
                            h1.no-top-marg: a(href=`${yungin.external_urls.spotify}` target="blank") #{yungin.name}
                            if yungin.genres.length
                                ul
                                    each genre in yungin.genres
                                        li #{genre}

block scripts
    script.
        (($) => {
            //- Let's make a function to display song titles for the preview form:
            function buildSongPreview(albumObject) {
                const ele = $('#songPreviews'),
                      old = $('#songPreviews li'),
                      play = 'playing';
                old.remove();
                for (let i = 0; i < albumObject.spotifyResponse.total; i++) {
                    const preview_url = albumObject.spotifyResponse.items[i].preview_url,
                          id          = albumObject.spotifyResponse.items[i].id,
                          name        = albumObject.spotifyResponse.items[i].name;
                    ele.append("<li><a data-preview-url=\"" + preview_url + "\" data-song-id=\"" + id + "\" class='song-clip-link'>" + name + "</a></li>");
                }

                let audioObject = null;
                $('.song-clip-link').click(function(e) {
                    const $this      = $(this),
                          otherSongs = $('.song-clip-link');

                    if ($this.hasClass(play)) {
                        $this.removeClass(play);
                        audioObject.pause()
                    } else {
                        // Remove .playing and pause any audio before starting new one.    
                        otherSongs.filter(function(song){
                            if (otherSongs[song].classList.contains(play)) {
                                audioObject.pause();
                                otherSongs[song].classList.remove(play);
                            }
                        });
                        // Add class playing and start playing
                        $this.addClass(play);
                        audioObject = new Audio($this.attr('data-preview-url'));
                        audioObject.play();
                        audioObject.addEventListener('ended', function(e){
                            $this.removeClass('playing');
                        });
                    }
                });
                
            }
            $(document).ready((e) => {
                //--------------- AJAX CALLS ----------------------//
                $('#artistSearch').submit((e) => {
                    e.preventDefault();
                    const searchParams = {artist: $('#searchArtist').val()};
                    $.get('/spotify/out/getArtistId', searchParams, (data) => {
                        $('#artistId').text(data)
                    });
                });
                $('#longerRequest').submit((e) => {
                    e.preventDefault();
                    const searchParams = {artist: $('#searchRelatedAlbums').val()};
                    $.get('/spotify/out/getRelatedAlbums', searchParams, (data) => {
                        $('#mostRelatedArtist').text(data.shift());
                        const albumList = $('#albumList'),
                              oldAlbums = $('#albumList li');
                        oldAlbums.remove();
                        $.each(data, (i) => {
                            albumList.append("<li>" + data[i] + "</li>");
                        });
                    });
                });
                $('#playPreviews').submit((e) => {
                    e.preventDefault();
                    const searchParams = {artist: $('#artistPreview').val()};
                    $.get('/spotify/out/playPreviews', searchParams, (data) => {
                        $('#songPreviewsAlbumTitle').text(data.albumTitle);
                        buildSongPreview(data);
                        
                    });
                });
            });
            
            
            
        })(jQuery);